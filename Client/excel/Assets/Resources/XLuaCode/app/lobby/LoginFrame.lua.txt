--打开登陆界面
local LoginFrame = {}

local GateNet = require(".net.GateNet")
local web = require(".net.web")
local UserMessage = require(".net.UserMessage")

local roomMgr = require(".app.room.RoomManager")

local Account = app.data.UserData.Account
local AccountUtils = app.util.AccountUtils
local json = app.util.JsonUtils

function LoginFrame.OnOpenFrame()
	GateNet.disconnect()

	--[[local accountHistory = AccountUtils.readAccountHistory()
	if self.accountHistory[1] then
		self.frame:GetObject('account').text = self.accountHistory[1].account
		self.frame:GetObject('password').text = self.accountHistory[1].password
	end]]--
	--DEMO
	self.frame:GetObject('txt_account').text = '13867486001'
	-- 添加按钮事件
	self.frame:GetObject('btn_start_game').onClick:AddListener(LoginFrame.onClickStartGame)
	self.frame:GetObject('btn_change_account').onClick:AddListener(LoginFrame.onClickChangeAccount)
end

-- 点击切换账号事件
LoginFrame.onClickChangeAccount = function()
	app.FrameManager.OpenFrameLua(app._FrameList.AccountSelectFrame)
end

LoginFrame.onClickStartGame = function()
	print("LoginFrame.onClickStartGame")
	local account = self.frame:GetObject('txt_account').text
	local password = 'il15958589125'

	--local err = self:checkLoginInput(account,password)
	--[[if err then
		--TODO 错误遮罩
		return
	end]]--

	self:login({
		channel = "game",
		account = account,
		password = password,
	})
end

function LoginFrame.OnCloseFrame()
end

-- ----------------------------------------控制代码--------------------------------------------------

function LoginFrame:checkLoginInput(account, password)
	local err
	if not account or #account == 0 then
		err = app.lang.account_nil
	elseif #account < 5 or #account > 12 or string.find(account, "[%W%.%-_]") then
		err = app.lang.account_error
	elseif not password or #password == 0 then
		err = app.lang.password_nil
	elseif #password < 5 or #password > 12 or string.find(password, "[%W%.%-_]") then
		err = app.lang.password_error
	end
	return err
end

function LoginFrame:login(params)

	params.cmd = "login"
	self:auth(params)
end

function LoginFrame.loginCallback(err,res)
	if CS.NetWork.HttpRequestError.HRE_SUCCEED == err then
		CS.UnityEngine.Debug.Log('<color=#00ff00>['..tostring(err)..']:'..res..'</color>')

		local resTable = web.FromResData(res)
		dump(resTable, "LoginFrame.loginCallback resTable:")

		Account.uid = tonumber(resTable.uid)
		Account.token = resTable.token--[[crypt.base64decode()]]--
		Account.secret = resTable.secret

		--全局保存
		--app.userdata.Account.uid = resTable.uid
		--app.userdata.Account.token = resTable.token
		-- 连接gate
		GateNet.connect(function(ok, msg)
			if not ok then
				--ProgressLayer.stop()
				--ErrorLayer.new(app.lang.gate_error..(msg or ""), errorLayerCallBack):addTo(self)
				print("connect failed:", (msg or ""))
				return
			end
			-- set jpush tag and alias
			--util.setJPushTagAndAlias(params.channel, params.account)
			print("UserMessage.send(UserInfoReq)")
			UserMessage.send("UserInfoReq", {uid=resTable.uid})

			-- 断线重连
			UserMessage.send("CheckReconnectReq", function(msg)
				if msg.roomid == 0 then
					app.FrameManager.OpenFrameLua(app._FrameList.LobbyFrame)
				else
					if msg.private then
						print("reconnect to private game")
						UserMessage.EnterPrivateReq(msg.tableid)
					else
						print("reconnect to normal game")
						UserMessage.send("RoomListReq", function()
							roomMgr:init(math.floor(msg.roomid/100), msg.roomid)
							UserMessage.send("EnterRoomReq", {roomid=msg.roomid}, function(m)
								roomMgr:EnterRoomRep(m)
							end)
						end)
					end
				end
			end)
		end)
	else
		CS.UnityEngine.Debug.LogError('['..tostring(err)..']:'..res)
	end
end

function LoginFrame:auth(params)
	local function getServerTimeCallback(err,res)
		if CS.NetWork.HttpRequestError.HRE_SUCCEED == err then
			CS.UnityEngine.Debug.Log('<color=#00ff00>['..tostring(err)..']:'..res..'</color>')

			--登陆服务器
			params.client_tag = tostring(CLIENT_TAG)
			params.platform = 'android'
			local msg = json.encode(params)
			--regMsg = CS.Common.DESEncrypt.MyEncode(regMsg,msg)
			--regMsg = numeric.tohex(regMsg)

			Account.account = params.account
			Account.password = params.password
			Account.channel = params.channel

			local postValues =
			{
				time = res,
				content = msg,
			}
			local postStr = web.ToPostData(postValues)
			print("HTTP postStr"..postStr)
			web.httpRequest(self.loginCallback, LOGIN_SERVER, "/login", "POST", postStr)
		else
			CS.UnityEngine.Debug.LogError('['..tostring(err)..']:'..res)
		end
	end

	--拉取服务器时间
	web.getServerTime(getServerTimeCallback,LOGIN_SERVER)
end

return LoginFrame