---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asus.
--- DateTime: 2018/4/25 18:36
---
local BaseMsgMgr = require(".app.BaseMsgMgr")
local msgMgr = class("msgMgr", BaseMsgMgr)

local message = require(".net.Message")

local msgMgr = {}
local roomMsg = {}
local tbnnMsg = {}

local handlers = {room=roomMsg, TBNN=tbnnMsg}

-- ------------------------------ room msg ------------------------------
function roomMsg.InitGameScenes(msg)

end


-- ------------------------------ TBNN msg ------------------------------
function tbnnMsg.GameConf(msg)
    dump(msg, "tbnnMsg.GameConf: ")
    --[[dump(msg, "tbnnMsg.GameConf")
    vars.room_gold = msg.roomgold
    vars.op_time_cd = msg.optimecd
    vars.tax_rate = msg.taxrate]]--
end


function tbnnMsg.GameStart(msg)
    dump(msg, "tbnnMsg.GameStart: ")
    --[[util.playSound(PATH.WAV_GAME_START)
    local delay = 0

    cardMgr:clearAllCards()

    for _, v in pairs(msg.players) do
        local seatId = _toSubSeatId(v.seat)
        local player = vars.players[seatId]
        player.ingame = true
        player.cards = v.cards
        for _, card in ipairs(v.cards) do
            scheduler.performWithDelay(function()
                cardMgr:sendCard2Player(seatId, _suitAndNumber(card))
            end, delay)
            delay = delay + 0.1
        end
        playerMgr:playerReady(seatId, false)
        playerMgr:playerActive(seatId, true)
    end
    delay = delay + TIME_GAP.SEND_CARD

    scheduler.performWithDelay(function()
        uiOperates:showConfirmAndAuto(true)
    end, delay)

    msgWorker.sleep(delay)]]--
end


function tbnnMsg.FinishedSync(msg)
    dump(msg, "tbnnMsg.FinishedSync: ")
    --[[local delay = 0
    local seatId = _toSubSeatId(msg.seat)
    local player = vars.players[seatId]
    player.finished = true

    cardMgr:showPlayerFinished(seatId, true)
    playerMgr:playerActive(seatId, false)
    util.playSound("res/Sound/TBNN/complete.mp3")
    if seatId == 1 then
        uiOperates:showConfirmAndAuto(false)
    end

    msgWorker.sleep(delay)]]--
end


function tbnnMsg.GameEnd(msg)
    dump(msg, "tbnnMsg.GameEnd: ")
    --[[local delay = 0
    local winseat = nil
    local youwin = false

    uiOperates:showConfirmAndAuto(false)

    for _, v in pairs(msg.players) do
        local seatId = _toSubSeatId(v.seat)
        local p = vars.players[seatId]
        p.cards = v.cards
        p:setScore(v.goldchange, vars.tax_rate)
        if v.goldchange > 0 then
            winseat = seatId
            if not vars.watching and seatId == 1 then
                youwin = true
            end
        end
        playerMgr:playerReady(seatId, false)
        playerMgr:playerActive(seatId, false)
        scheduler.performWithDelay(function()
            cardMgr:showPlayerCards(seatId, v.cardtype)
            cardMgr:showPlayerFinished(seatId, false)
            cardMgr:showPlayerCardType(seatId, v.cardtype)
        end, delay)
        delay = delay + 1
    end

    for _, v in pairs(msg.players) do
        local seatId = _toSubSeatId(v.seat)
        if v.goldchange < 0 then
            scheduler.performWithDelay(function()
                jettonMgr:throwBaseJetton(seatId, math.abs(v.goldchange))
            end, delay)
        end
    end
    delay = delay + TIME_GAP.THROW_JETS + 0.5

    scheduler.performWithDelay(function()
        for _, v in pairs(msg.players) do
            local seatId = _toSubSeatId(v.seat)
            playerMgr:showPlayerScore(seatId)
            uiPlayers:updateGold(seatId)
        end
        jettonMgr:poolJettons2Player(winseat)
        if not vars.watching then
            if winseat == 1 then
                util.playSound(PATH.WAV_GAME_WIN)
            else
                util.playSound(PATH.WAV_GAME_LOSE)
            end
        end
        local p = vars.players[1]
        if not p.ingame or vars.watching then
            util.playSound(PATH.WAV_GAME_END)
        end
    end, delay)
    delay = delay + TIME_GAP.POOL_TO_PLAYER + 1

    msgWorker.sleep(delay)]]--
end


function tbnnMsg.SyncGameInfo(msg)
    dump(msg, "tbnnMsg.SyncGameInfo: ")
    --[[local delay = 0

    playerMgr:playerActive(1, false)
    uiOperates:showReadyBtn(false)
    uiOperates:showConfirmAndAuto(false)

    for _, v in pairs(msg.players) do
        local seatId = _toSubSeatId(v.seat)
        local p = vars.players[seatId]
        p.ingame = true
        p.finished = v.finished
        p.cards = v.cards
        for _, card in pairs(v.cards) do
            cardMgr:setPlayerCard(seatId, _suitAndNumber(card))
        end
        cardMgr:showPlayerFinished(seatId, p.finished)
        playerMgr:playerReady(seatId, false)
        playerMgr:playerActive(seatId, not p.finished, msg.optime)
        if seatId == 1 then
            uiOperates:showConfirmAndAuto(not p.finished)
        end
    end

    msgWorker.sleep(delay)]]--
end

-- ------------------------------ msg manager ------------------------------

return msgMgr