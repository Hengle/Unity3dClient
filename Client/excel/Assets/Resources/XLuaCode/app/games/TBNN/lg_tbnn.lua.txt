---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asus.
--- DateTime: 2018/4/25 15:14
---
local lg = {}

local cardres = {
    10,11,12,13,
    20,21,22,23,
    30,31,32,33,
    40,41,42,43,
    50,51,52,53,
    60,61,62,63,
    70,71,72,73,
    80,81,82,83,
    90,91,92,93,
    100,101,102,103,
    110,111,112,113,
    120,121,122,123,
    130,131,132,133,
    140,141,
}

local ct_none = 0
local ct_bull_1 = 1
local ct_bull_2 = 2
local ct_bull_3 = 3
local ct_bull_4 = 4
local ct_bull_5 = 5
local ct_bull_6 = 6
local ct_bull_7 = 7
local ct_bull_8 = 8
local ct_bull_9 = 9
local ct_bull_bull = 10
local ct_flower4 = 11
local ct_flower5 = 12
local ct_bomb = 13
local ct_less_ten = 14

local MAX_MULTI = 10

lg.MAX_MULTI = MAX_MULTI


local function logicValue(card)
    assert(type(card) ~= 'table')
    return math.floor(card / 10)
end


local function getHumanVisible(card)
    local v = logicValue(card)
    local color
    if card % 10 == 0 then
        color = '♦'
    elseif card % 10 == 1 then
        color = '♣'
    elseif card % 10 == 2 then
        color = '♥'
    elseif card % 10 == 3 then
        color = '♠'
    end

    local str = ''
    if v == 1 then
        str = 'A'..color
    elseif v < 10 then
        str = string.format('%s%s', tostring(v), color)
    elseif v == 10 then
        str = 'T'..color
    elseif v == 11 then
        str = 'J'..color
    elseif v == 12 then
        str = 'Q'..color
    elseif v == 13 then
        str = 'K'..color
    elseif v == 14 then
        str = '$'..color
    end

    return str
end


function lg.digitalCards(cards)
    if not cards then return "" end
    local buff = ''
    for i = 1, #cards do
        if i > 1 then
            buff = buff..','
        end
        buff = string.format("%s%s", buff, tostring(cards[i]))
    end
    return buff
end


function lg.visualCards(cards)
    if not cards then return "" end
    local buff = ''
    for i = 1, #cards do
        buff = buff..getHumanVisible(cards[i])..' '
    end
    return buff
end


local function get_card_value(card)
    local value = math.floor(card / 10)
    if value > 10 then value = 10 end
    return value
end


local function find_niu(cards, testcards, pos, value)
    pos = pos or 1
    value = value or 0
    if #testcards > 3 then
        return false
    elseif value % 10 == 0 and #testcards == 3 then
        return true
    end

    for i = pos, #cards do
        table.insert(testcards, cards[i])
        if find_niu(cards, testcards, i+1, value+get_card_value(cards[i])) then
            return true
        end
        table.remove(testcards, #testcards)
    end
    return false
end


local function sort_niu_cards(cards, result_cards)
    for i, v in ipairs(result_cards) do
        local k = table.indexof(cards, v)
        if i ~= k then
            cards[i], cards[k] = cards[k], cards[i]
        end
    end
end


function lg.get_cardinfo(cards, wildcard)
    if cards == nil or #cards < 4 then
        LOG_ERROR("get_cardinfo failed!")
        return
    end

    local len = #cards
    local max_card = cards[1]
    for i = 2, len do
        if max_card < cards[i] then
            max_card = cards[i]
        end
    end

    --五小牛
    local sum = 0
    for i = 1, len do
        sum = sum + get_card_value(cards[i])
    end
    if sum <= 10 then
        local find = false
        for k, v in pairs(cards) do
            if v > 53 then
                find = true
                break
            end
        end
        if not find then
            return {ct = ct_less_ten, card = max_card, multi = MAX_MULTI}
        end
    end

    --炸弹
    local num_set = {}
    for i = 1, 5 do
        local num = math.floor(cards[i]/10)
        local cnt = num_set[num] or 0
        num_set[num] = cnt + 1
    end
    for k, v in pairs(num_set) do
        if v == 4 then
            return {ct = ct_bomb, card = k, multi = 6}
        end
    end

    sum = 0
    for i = 1, 3 do
        sum = sum + get_card_value(cards[i])
    end
    --无牛
    if sum % 10 ~= 0 then
        if wildcard then -- 检查赖子
            for i = 1, 3 do
                if cards[i] >= 140 then
                    sum = get_card_value(cards[4]) + get_card_value(cards[5])
                    sum = sum % 10
                    if sum == 0 then
                        return {ct = ct_bull_bull, card = 0, multi = 3}
                    elseif sum < 7 then
                        return {ct = sum, card = 0, multi = 1}
                    else
                        return {ct = sum, card = 0, multi = 2}
                    end
                end
            end
        end
        return {ct = ct_none, card = max_card, multi = 1}
    end

    sum = 0
    for i = 4, len do
        sum = sum + get_card_value(cards[i])
    end
    --牛1 - 牛9
    sum = sum % 10
    if sum ~= 0 then
        if sum < 7 then
            return {ct = sum, card = max_card, multi = 1}
        else
            return {ct = sum, card = max_card, multi = 2}
        end
    end

    --五花牛 四花牛 牛牛
    local cnt = 0
    sum = 0
    for i,v in ipairs(cards) do
        if v >= 110 then
            cnt = cnt + 1
        end
        if v >= 100 and v <= 103 then
            sum = 1
        end
    end
    if cnt == 5 then
        return {ct = ct_flower5, card = max_card, multi = 5}
    elseif cnt == 4 then
        return {ct = ct_flower4, card = max_card, multi = 4}
    else
        return {ct = ct_bull_bull, card = max_card, multi = 3}
    end
end


local swap_pairs = {
    {0,0}, {2,4}, {3,4}, {2,5}, {3,5}, {3,4}
}
function lg.find_cardinfo(cards)
    if cards == nil or #cards < 4 then
        LOG_ERROR("find_cardinfo failed!")
        return
    end

    local ret_cards = table.arraycopy(cards)
    local ten_cards = {}
    if find_niu(ret_cards, ten_cards) then
        sort_niu_cards(ret_cards, ten_cards)
    end
    local info = lg.get_cardinfo(ret_cards)

    -- 赖子
    if info.ct < 10 and table.exist(cards, function(v) return v >= 140 end) then
        local tmp_cards = table.arraycopy(cards)
        table.sort(tmp_cards, function(v1, v2) return v1 < v2 end)
        for i, v in ipairs(tmp_cards) do
            if v >= 140 then -- pick Clown into first
                tmp_cards[i], tmp_cards[1] = tmp_cards[1], tmp_cards[i]
                break
            end
        end
        for _, v in pairs(swap_pairs) do
            tmp_cards[v[1]], tmp_cards[v[2]] = tmp_cards[v[2]], tmp_cards[v[1]]
            local tmp_info = lg.get_cardinfo(tmp_cards, true)
            if tmp_info.ct > info.ct then
                info = table.deepcopy(tmp_info)
                ret_cards = table.deepcopy(tmp_cards)
            end
        end
    end

    return info, ret_cards
end


function lg.cmp_cardinfo(c1, c2)
    if c1.ct ~= c2.ct then
        return c1.ct - c2.ct
    end
    return c1.card - c2.card
end


function lg.new_cards()
    table.shuffle(cardres)
    local ret = table.arraycopy(cardres, 1, 30)

    if DEV_TEST then
        ret = {
            141,11,90,30,12,
            30,62,140,71,120,
            80,81,82,83,90,
            70,61,52,63,90,
            20,41,102,113,30,
            90,91,92,93,110,
            90,91,92,93,110,
        }
        -- for i, v in ipairs(ret) do
        -- 	if i > 5 and v >= 140 then
        -- 		local k = math.random(1,5)
        -- 		ret[k], ret[i] = ret[i], ret[k]
        -- 		return ret
        -- 	end
        -- end
        -- local k = math.random(1,5)
        -- ret[k] = 140
    end

    return ret
end

return lg