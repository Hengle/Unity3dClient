
local message = require(".net.Message")

local msgMgr = {}
local roomMsg = {} -- client room manage this message type
local gameMsg = {}
local lkpyMsg = {}

local handlers = {game=gameMsg, room=roomMsg, LKPY=lkpyMsg}

local _session = nil
local _scene = nil
local _seat = 0
local _max_player = 6
local _watching = false
local _room_id = 0
local _gameId = 0
local _gameKey = nil
local _game_config = {}

-- ------------------------------ room msg ------------------------------
function roomMsg.InitGameScenes(msg)
	dump(msg, "LKPY roomMsg.InitGameScenes:", 8)
	_session = msg.session
	_seat = msg.seat
	_max_player = msg.max_player
	_watching = msg.watching
	_room_id = msg.roomid
	_gameId = msg.gameid
	_gameKey = msg.gamekey
	_game_config = msg.config

	app.Logger.LogFormat("<color=#00ff00>_session = {0} _seat = {1}  mp={2} watching={3} room_id={4} gameid={5} _gameKey={6}</color>",
			_session,_seat,_max_player,_watching,_room_id,_gameId,_gameKey)
end

function roomMsg.EnterGame(msg)
	dump(msg, "LKPY roomMsg.EnterGame:")

end

function roomMsg.LeaveGame(msg)
	dump(msg, "LKPY roomMsg.LeaveGame:")

end

function roomMsg.ReadyRep(msg)
	dump(msg, "LKPY roomMsg.ReadyRep:")

end

function roomMsg.Ready(msg)
	dump(msg, "LKPY roomMsg.Ready:")

end


-- ------------------------------ LKPY msg ------------------------------
function lkpyMsg.SceneFishSync(msg)
	dump(msg, "SceneFishSync !!!")

end

function lkpyMsg.SwitchSceneSync(msg)
	dump(msg, "SwitchSceneSync !!!")

end

function lkpyMsg.DistributeFish(msg)
	dump(msg, "DistributeFish !!!")
	

end

function lkpyMsg.UserFireRep(msg)
	dump(msg, "UserFireRep")

end

function lkpyMsg.ExchangeFishScoreRep(msg)
	dump(msg, ExchangeFishScoreRep)
end


-- ------------------------------ msg manager ------------------------------
function msgMgr:init(tableScene)
	_scene = tableScene
end

function msgMgr:clear()
end

function msgMgr:sendMsg(name, msg)
	msg.session = _session
	message.sendMessage(name, msg)
end

function msgMgr:sendLeaveGame()
	message.dispatchGame("room.LeaveGame")
	_scene = nil
end

function msgMgr:sendExitTable()
	message.dispatchGame("room.ExitTable")
	_scene = nil
end

function msgMgr:sendReadyRequest()
	message.dispatchGame("room.ReadyReq")
end

function msgMgr:dispatch(name, msg)
	if _scene == nil then
		print("this msgMgr's scene is nil !!!", name)
		return
	end

	local clsName, funcName = name:match "([^.]*).(.*)"
	-- printf("msg %s got %s:%s", name, clsName, funcName)
	-- dump(msg)
	assert(handlers[clsName], clsName .. " handler not exist!")
	if handlers[clsName] then
		-- dump(handlers[clsName])
		assert(handlers[clsName][funcName], clsName.."Mgr have no func: "..funcName)
		handlers[clsName][funcName](msg)
		--NOTE: sometims have no stack traceback infomations
		-- xpcall(handlers[clsName][funcName], debug.traceback, msg) 
	end
end

return msgMgr