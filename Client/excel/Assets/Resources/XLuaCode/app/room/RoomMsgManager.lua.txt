---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asus.
--- DateTime: 2018/4/15 19:57
---
local RoomMsgManager = {}

local RoomConfig = require(".app.config.RoomConfig")

local message = require(".net.Message")

local _Player = app.data.UserData.Player

local roomScene = nil

local player_info = {}
local table_states = {}

local TABLE_STATE = {
    WAIT = 0x00,
    GAME = 0x01, -- game started
    LOCK = 0x02, -- table locked by password
}

-- message handlers
local gameMsg = {}	-- from server
local userMsg = {}	-- from server
local roomMsg = {}	-- from client table

local handlers = {game=gameMsg, user=userMsg, room=roomMsg}

local table_id = 0
local seat_id = 0
local watching = false

local gameid = nil
local roomid = nil
local gamekey = ""
local game_config = {}

local room_session = 0
local table_session = 0
local game_scene_id = nil
local max_player = nil
local max_seats = nil

-- ------------------------------ UserMessage ------------------------------
function RoomMsgManager:EnterRoomRep(msg)
    dump(msg, "RoomMsgManager EnterRoomRep:")
    --print("enter room result:" .. msg.result)
        if msg.result ~= 0 then
            local roomid = msg.roomid
            local err_str = string.format(util.error(msg.result), RoomConfig:getFullName(roomid))
            print("RoomMsgManager  EnterRoomRep Error: ", err_str)
        end

    for tableid, t in pairs(player_info) do
        for seatid, p in pairs(t) do
            if p.uid == _Player.uid then
                -- reconnect to the old place
                printf("reconnect to table:%d seat:%d", tableid, seatid)
                message.sendMessage("game.SitdownReq", {
                    session = room_session,
                    table = tableid,
                    seat = seatid,
                    -- rule = _Player.roomRule, -- reconnect is unnecessary
                })
                return
            end
        end
    end
    print("RoomScene gameid:" .. gameid .. " roomid:" .. roomid)

    local conf = RoomConfig:getGameConfig(gameid)
    if conf.quick then
        message.sendMessage("game.SitdownReq", {
            session = room_session,
            table = 0,
            seat = 0,
        })
        return
    end

end

-- ------------------------------ game msg ------------------------------
function gameMsg.RoomSession(msg)
    print("get room session:", msg.session)
    room_session = msg.session
end

function gameMsg.SetSession(msg)
    print("get table session:", msg.session)
    table_session = msg.session
end

function gameMsg.SitdownRep(msg)
    dump(msg,"RoomMsgManager gameMsg.SitdownRep: ");
    print("sit down result:" .. msg.result .. " table session:" .. table_session .. " tableid:" .. msg.table)
    if msg.result ~= 0 then
        local conf = RoomConfig:getGameConfig(gameid)
        if conf.quick then
            message.sendMessage("game.LeaveRoomReq", {session=room_session})
        end
        local error_str = app.util.ToolUtils.error(msg.result)
        printError("gameMsg.SitdownRep Error:",error_str)
        return
    end

    table_id = msg.table
    seat_id = msg.seat
    watching = (msg.watching == 1)
    local userData = {name="room.InitGameScenes"}
    if game_scene_id ~= nil and type(game_scene_id) ~= "number" then
        if max_seats ~= nil then
            local pos = (table_id-1) % (#max_seats) + 1
            userData.msg =
            {
                session = table_session,
                seat = seat_id,
                watching = watching,
                max_player = max_seats[pos],
                roomid = roomid,
                gameid = gameid,
                gamekey = gamekey,
                config = game_config
            }
        else
            userData.msg =
            {
                session = table_session,
                seat = seat_id,
                max_player = max_player,
                watching = watching,
                roomid = roomid,
                gameid = gameid,
                gamekey = gamekey,
                config = game_config
            }
        end
        app.SceneManager:SwitchScene(game_scene_id,userData)
    else
        printError("game_scene_id is nil!")
        if roomScene then
            errorLayer.new("坐到桌子成功"):addTo(roomScene)
        end
    end
end

function gameMsg.SitupRep(msg)
    dump(msg)
end

function gameMsg.TableStateInfo(msg)
    dump(msg, "TableStateInfo", 8)
    if msg.session == room_session then --TODO: remove this later
        for i = 1, #msg.player do
            local p = {
                uid = msg.player[i].uid,
                name = msg.player[i].name,
                gold = msg.player[i].gold,
                ready = msg.player[i].ready,
                sex = msg.player[i].sex,
                avatarurl = msg.player[i].avatarurl,
            }
            RoomMsgManager:add_seat_player(msg.table, msg.player[i].seat, p)
        end
        printf("set table:%d state:%d", msg.table, msg.state)
        RoomMsgManager:set_table_state(msg.table, msg.state)
        if roomScene then
            for i = 1, #msg.player do
                roomScene:playerSeat(msg.table, msg.player[i].seat, msg.player[i])
                roomScene:SeatReady(msg.table, msg.player[i].seat, msg.player[i].ready>0)
            end
            roomScene:tableState(msg.table, msg.state)
        end
    elseif msg.session == table_session then
        if msg.table == table_id then
            for i = 1, #msg.player do
                message.dispatchCurrent("room.EnterGame", {
                    seat = msg.player[i].seat,
                    player = {
                        uid = msg.player[i].uid,
                        name = msg.player[i].name,
                        gold = msg.player[i].gold,
                        ready = msg.player[i].ready,
                        sex = msg.player[i].sex,
                        avatarurl = msg.player[i].avatarurl,
                    }
                })
            end
        end
    end
end

function gameMsg.RoomInfo(msg)
    dump(msg, "RoomMsgManager gameMsg.RoomInfo: ")
    --[[dump(msg, "gameMsg.RoomInfo !!!", 8)
    if msg.session ~= room_session then
        return
    end

    if roomScene then
        for tableid, t in pairs(player_info) do
            for seatid, _ in pairs(t) do
                roomScene:playerSeat(tableid, seatid, nil)
                roomScene:SeatReady(tableid, seatid, false)
            end
        end
    end
    player_info = {}
	table_states = {}

    for _, t in ipairs(msg.tableinfos) do
        for _, v in ipairs(t.player) do
            local p = {
                uid = v.uid,
                name = v.name,
                gold = v.gold,
                ready = v.ready,
                sex = v.sex,
                avatarurl = v.avatarurl,
            }
            msgMgr:add_seat_player(t.table, v.seat, p)
        end
        printf("set table:%d state:%d", t.table, t.state)
        msgMgr:set_table_state(t.table, t.state)
        if roomScene then
            for _, v in ipairs(t.player) do
                roomScene:playerSeat(t.table, v.seat, v)
                roomScene:SeatReady(t.table, v.seat, v.ready>0)
            end
            roomScene:tableState(t.table, t.state)
        end
    end]]--
end

function gameMsg.TableSitdown(msg)
    dump(msg, "RoomMsgManager gameMsg.TableSitdown: ")
    if msg.session == room_session then
        local p = {
            uid = msg.player.uid,
            name = msg.player.name,
            gold = msg.player.gold,
            ready = 0,
            sex = msg.player.sex,
            avatarurl = msg.player.avatarurl,
        }
        RoomMsgManager:add_seat_player(msg.table, msg.seat, p)
        if roomScene then
            roomScene:playerSeat(msg.table, msg.seat, msg.player)
        end
    elseif msg.session == table_session then
        if msg.table == table_id then
            message.dispatchCurrent("room.EnterGame", {
                seat = msg.seat,
                player = {
                    uid = msg.player.uid,
                    name = msg.player.name,
                    gold = msg.player.gold,
                    ready = 0,
                    sex = msg.player.sex,
                    avatarurl = msg.player.avatarurl,
                }
            })
        end
    end
end

-- ------------------------------ message manager ------------------------------
function RoomMsgManager:setRoomScene(scene)
    roomScene = scene
    if scene then
        print("set room scene succeed.")
        -- errorLayer.new("进入房间成功"):addTo(roomScene)
    end
end

function RoomMsgManager:dispatch(name, msg)
    local clsName, funcName = name:match "([^.]*).(.*)"
    assert(handlers[clsName], clsName .. " handler not exist!")
    if handlers[clsName] then
        assert(handlers[clsName][funcName], clsName.."Mgr have no func: "..funcName)
        handlers[clsName][funcName](msg)
    end
    return true
end

---------------------------------- room table state manage -------------------------------------
function RoomMsgManager:set_table_state(tableid, state)
    table_states[tableid] = state
end

function RoomMsgManager:add_table_state(tableid, state)
    table_states[tableid] = table_states[tableid] or TABLE_STATE.WAIT
    table_states[tableid] = bit.bor(table_states[tableid], state)
end

function RoomMsgManager:cls_table_state(tableid, state)
    table_states[tableid] = table_states[tableid] or TABLE_STATE.WAIT
    table_states[tableid] = bit.band(table_states[tableid], bit.bnot(state))
end

function RoomMsgManager:add_seat_player(table, seat, player)
    if player_info[table] == nil then
        player_info[table] = {}
    end
    player_info[table][seat] = player
end


function RoomMsgManager:remove_seat_player(table, seat)
    local temp = player_info[table]
    if temp ~= nil then
        temp[seat] = nil
    end
end


function RoomMsgManager:get_seat_players(table)
    local temp = player_info[table]
    if temp ~= nil then
        return temp
    end
    return {}
end


function RoomMsgManager:get_seat_player(table, seat)
    local temp = player_info[table]
    if temp ~= nil then
        return temp[seat]
    end
    return nil
end

function RoomMsgManager:get_table_info()
    return player_info
end


function RoomMsgManager:get_table_state(tid)
    if tid then
        return table_states[tid]
    end
    return table_states
end

---------------------------------room data visit------------------------------------------
function RoomMsgManager:setRoomId(gid, rid)
    gameid = gid
    roomid = rid
    player_info = {}
    table_states = {}
    print("setRoomId gameid:" .. gameid .. " roomid:" .. roomid)
end

function RoomMsgManager:setGameSceneId(sceneId)
    game_scene_id = sceneId
end

function RoomMsgManager:setMaxPlayer(max, seats)
    max_player = max
    if seats ~= nil then
        max_seats = {}
        for i = 1, #seats do
            max_seats[i] = #seats[i]
        end
    else
        max_seats = nil
    end
end

function RoomMsgManager:setGameKey(key)
    gamekey = key
end

function RoomMsgManager:get_room_session()
    return room_session
end

function RoomMsgManager:setGameConfig(conf)
    game_config = conf
end

return RoomMsgManager


--TODO:ROOMLIST
--[[do
    local ret= {
        [1] = {
            tables=60,
            seats=4,
            maxRoomPlayer=500,
            seatslayout = {
                [1] = {
                    [1]=1,
                    [2]=2,
                    [3]=3,
                    [4]=4},
                [2] = {
                    [1]=1,
                    [2]=2,
                    [3]=4},
                [3] = {
                    [1]=1,
                    [2]=3}
            },
            gamekey="XZMJ",
            name="血战到底",
            gold=1000,
            roomid=10100,
            gameid=101,
            layout = {
                lock = {
                    posx=240,
                    posy=170,
                    icon="Image/Common/Table/Image_Table_Lock.png"
                },
                name={
                    [1]={
                        id=1,
                        posy=90,
                        point="left",
                        posx=272},
                    [2]={
                        id=2,
                        posy=220,
                        point="center",
                        posx=302},
                    [3]={
                        id=3,
                        posy=270,
                        point="right",
                        posx=152},
                    [4]={
                        id=4,
                        posy=140,
                        point="center",
                        posx=122}},
                table={
                    posx=212,
                    posy=180,
                    idle="Image/XZMJ/Image_Table_Unplay.png",
                    busy="Image/XZMJ/Image_Table_Playing.png"},
                height=360,
                seat={
                    [1]={
                        id=1,
                        posy=90,
                        icon="Image/XZMJ/Image_chair_down.png",
                        posx=212},
                    [2]={
                        id=2,
                        posy=180,
                        icon="Image/XZMJ/Image_chair_right.png",
                        posx=302},
                    [3]={
                        id=3,
                        posy=270,
                        icon="Image/XZMJ/Image_chair_up.png",
                        posx=212},
                    [4]={
                        id=4,
                        posy=180,
                        icon="Image/XZMJ/Image_chair_left.png",
                        posx=122}},
                hand={
                    [1]={
                        id=1,
                        posy=110,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=272},
                    [2]={
                        id=2,
                        posy=240,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=302},
                    [3]={
                        id=3,
                        posy=290,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=152},
                    [4]={
                        id=4,
                        posy=120,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=122}
                },
                width=426
            }
        },
        [2]={
            tables=60,
            seats=4,
            maxRoomPlayer=500,
            seatslayout={
                [1]={
                    [1]=1,
                    [2]=2,
                    [3]=3,
                    [4]=4},
                [2]={
                    [1]=1,
                    [2]=2,
                    [3]=4},
                [3]={
                    [1]=1,
                    [2]=3}
            },
            gamekey="XLMJ",
            name="血流成河",
            gold=1000,
            roomid=10101,
            gameid=101,
            layout={
                lock={
                    posx=240,
                    posy=170,
                    icon="Image/Common/Table/Image_Table_Lock.png"},
                name={
                    [1]={
                        id=1,
                        posy=90,
                        point="left",
                        posx=272},
                    [2]={
                        id=2,
                        posy=220,
                        point="center",
                        posx=302},
                    [3]={
                        id=3,
                        posy=270,
                        point="right",
                        posx=152},
                    [4]={
                        id=4,
                        posy=140,
                        point="center",
                        posx=122}},
                table={
                    posx=212,
                    posy=180,
                    idle="Image/XZMJ/Image_Table_Unplay.png",
                    busy="Image/XZMJ/Image_Table_Playing.png"
                },
                height=360,
                seat={
                    [1]={
                        id=1,
                        posy=90,
                        icon="Image/XZMJ/Image_chair_down.png",
                        posx=212},
                    [2]={
                        id=2,
                        posy=180,
                        icon="Image/XZMJ/Image_chair_right.png",
                        posx=302},
                    [3]={
                        id=3,
                        posy=270,
                        icon="Image/XZMJ/Image_chair_up.png",
                        posx=212},
                    [4]={
                        id=4,
                        posy=180,
                        icon="Image/XZMJ/Image_chair_left.png",
                        posx=122}
                },
                hand={
                    [1]={
                        id=1,
                        posy=110,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=272},
                    [2]={
                        id=2,
                        posy=240,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=302},
                    [3]={
                        id=3,
                        posy=290,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=152},
                    [4]={
                        id=4,
                        posy=120,
                        icon="Image/Common/Table/Image_Ready.png",
                        posx=122}
                },
                width=426
            }
        }
    }
    return ret
end]]--

--[[{
    "players" = {
        1 = {
    "count"  = 0
    "roomid" = 10100},
    2 = {
    "roomid" = 10101},
    3 = {
    "roomid" = 10199}
    },
}]]--

--[["LoginFrame.loginCallback resTable:" = {
"result" = "0"
"secret" = "NXLimUM9lnuYYYDeEuPRzt8SpaDZg+JSgGV97I5LuUaYP53VV8ZdWs6NyHPRSUr75ETZUOSPqO/+PH5va/xXgPi8Tk61opg8"
"sign"   = "qcKopMAqngpH2vnzGttkzNZVJ+0="
"token"  = "w0G2MyBTVdM="
"uid"    = "100001"
}]]--