---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asus.
--- DateTime: 2018/4/10 14:01
---
local AccountUtils = {}

local crypt = CS.Common.DESEncrypt

function AccountUtils.addAccountHistory(history, account, password)
    if not account or account == "" then return end

    history = checktable(history)
    local old
    for i,v in ipairs(history) do
        if v.account == account then
            v.password = password
            old = v
            table.remove(history, i)
            break
        end
    end

    old = old or {account = account, password = password}
    table.insert(history, 1, old)

    for i=11,#history do
        table.remove(history)
    end

    return history
end

local account_history_upper = 10

function AccountUtils.saveAccountHistory(history)
    if not history then return end

    local writeablePath = CS.GameClient.LocalSettingManager.getPersistentPath("/account_history")
    print("CSharp getPersistentPath():", writeablePath)

    local file = io.open(writeablePath, "w+")
    if not file then return end

    --file:write(tostring(util.getVersion()) .. "\n")

    for i,v in ipairs(history) do
        if i > account_history_upper then
            break
        end

        local record = history[i]
        file:write(record.account .. "=" .. record.password .. "\n")--[[util.encodePwd()]]--
    end
    file:close()
end

function AccountUtils.readAccountHistory()
    _AccountHistory = {} -- TODO

    local writeablePath = CS.GameClient.LocalSettingManager.GetJasonString("/account_history")
    print("CSharp getPersistentPath():", writeablePath)

    local file = io.open(writeablePath, "r")
    if not file then
        file = io.open(writeablePath, "w")
        file:close()
        return _AccountHistory
    end

    --local clear, checked
    for line in file:lines() do
        --[[if not checked then
            if line ~= util.getVersion() then
                clear = true
                break
            end
            checked = true
        end]]--

        local account, password = string.match(line, "([^=]*)=(.*)")
        if account and account ~= "" then
            table.insert(_AccountHistory, {
                account = account,
                password = password--[[util.decodePwd()]]--
            })
        end
    end
    file:close()

    return _AccountHistory
end

-- ----------------------------------------------------------------------------------------------------

local PASSWORD_CRYPT_KEY = "gqs7rm0y"

function AccountUtils.encodePwd(pwd)
    if not pwd or pwd == "" then
        return ""
    end

    assert(PASSWORD_CRYPT_KEY, "PASSWORD_CRYPT_KEY is nil! Check your config.")
    local ret = crypt:DesEncrypt(PASSWORD_CRYPT_KEY,pwd)
    return ret
end

function AccountUtils.decodePwd(pwd)
    if not pwd or pwd == "" then
        return ""
    end
end

return AccountUtils