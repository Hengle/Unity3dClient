---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by asus.
--- DateTime: 2018/4/10 14:01
---
local AccountUtils = {}

local account_history_upper = 10

function AccountUtils.addAccountHistory(history, account, password)
    if not account or account == "" then return end

    history = checktable(history)
    local old
    for i,v in ipairs(history) do
        if v.account == account then
            v.password = password
            old = v
            table.remove(history, i)
            break
        end
    end

    old = old or {account = account, password = password}
    table.insert(history, 1, old)

    for i = account_history_upper + 1,#history do
        table.remove(history)
    end

    return history
end

function AccountUtils.saveAccountHistory(history)
    if not history then return end

    local content = app.FileManager:GetJasonString(app._FileList.AccountInfo)
    if not content then return end

    content = string.format(content,(tostring(util.getVersion()) .. "\n"))
    for i,v in ipairs(history) do
        if i > account_history_upper then
            break
        end

        local record = history[i]
        content = string.format(content,(record.account .. "=" .. record.password .. "\n"))
    end
    app.FileManager:SaveJasonString(app._FileList.AccountInfo, content)
end

function AccountUtils.readAccountHistory()
    _AccountHistory = {}

    local content = app.FileManager:GetJasonString(app._FileList.AccountInfo)
    if not file then
        return _AccountHistory
    end

    local checked
    local lines = string.split(content,'\n')
    for line in lines do
        if not checked then
            if line ~= util.getVersion() then
                break
            end
            checked = true
        end

        local account, password = string.match(line, "([^=]*)=(.*)")
        if account and account ~= "" then
            table.insert(_AccountHistory, {
                account = account,
                password = password,
            })
        end
    end

    return _AccountHistory
end

-- ----------------------------------------------------------------------------------------------------

local crypt = CS.Common.DESEncrypt


local PASSWORD_CRYPT_KEY = "gqs7rm0y"

function AccountUtils.encodePwd(pwd)
    if not pwd or pwd == "" then
        return ""
    end

    assert(PASSWORD_CRYPT_KEY, "PASSWORD_CRYPT_KEY is nil! Check your config.")
    local ret = crypt:DesEncrypt(PASSWORD_CRYPT_KEY,pwd)
    return ret
end

function AccountUtils.decodePwd(pwd)
    if not pwd or pwd == "" then
        return ""
    end
end

return AccountUtils