//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: BuffDrugConfigInfoTable.proto
namespace ProtoTable
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"BuffDrugConfigInfoTable")]
  public partial class BuffDrugConfigInfoTable : global::ProtoBuf.IExtensible
  {
    public BuffDrugConfigInfoTable() {}
    
    private int _ID;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"ID", DataFormat = global::ProtoBuf.DataFormat.ZigZag)]
    public int ID
    {
      get { return _ID; }
      set { _ID = value; }
    }
    private string _Filed;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"Filed", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string Filed
    {
      get { return _Filed; }
      set { _Filed = value; }
    }
    private ProtoTable.BuffDrugConfigInfoTable.eValueType _ValueType;
    [global::ProtoBuf.ProtoMember(3, IsRequired = true, Name=@"ValueType", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public ProtoTable.BuffDrugConfigInfoTable.eValueType ValueType
    {
      get { return _ValueType; }
      set { _ValueType = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"eValueType")]
    public enum eValueType
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"Value", Value=0)]
      Value = 0,
            
      [global::ProtoBuf.ProtoEnum(Name=@"Rate100", Value=1)]
      Rate100 = 1,
            
      [global::ProtoBuf.ProtoEnum(Name=@"Rate1000", Value=2)]
      Rate1000 = 2
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}