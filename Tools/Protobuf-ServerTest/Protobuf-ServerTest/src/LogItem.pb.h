// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogItem.proto

#ifndef PROTOBUF_LogItem_2eproto__INCLUDED
#define PROTOBUF_LogItem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MsgHead.pb.h"
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogItem_2eproto();
void protobuf_AssignDesc_LogItem_2eproto();
void protobuf_ShutdownFile_LogItem_2eproto();

class LogItem;

enum LogItem_LogType {
  LogItem_LogType_LT_NORMAL = 1,
  LogItem_LogType_LT_WARNING = 2,
  LogItem_LogType_LT_ERROR = 4,
  LogItem_LogType_LT_PROCESS = 8
};
bool LogItem_LogType_IsValid(int value);
const LogItem_LogType LogItem_LogType_LogType_MIN = LogItem_LogType_LT_NORMAL;
const LogItem_LogType LogItem_LogType_LogType_MAX = LogItem_LogType_LT_PROCESS;
const int LogItem_LogType_LogType_ARRAYSIZE = LogItem_LogType_LogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogItem_LogType_descriptor();
inline const ::std::string& LogItem_LogType_Name(LogItem_LogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogItem_LogType_descriptor(), value);
}
inline bool LogItem_LogType_Parse(
    const ::std::string& name, LogItem_LogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogItem_LogType>(
    LogItem_LogType_descriptor(), name, value);
}
// ===================================================================

class LogItem : public ::google::protobuf::Message {
 public:
  LogItem();
  virtual ~LogItem();

  LogItem(const LogItem& from);

  inline LogItem& operator=(const LogItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogItem& default_instance();

  void Swap(LogItem* other);

  // implements Message ----------------------------------------------

  LogItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogItem& from);
  void MergeFrom(const LogItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LogItem_LogType LogType;
  static const LogType LT_NORMAL = LogItem_LogType_LT_NORMAL;
  static const LogType LT_WARNING = LogItem_LogType_LT_WARNING;
  static const LogType LT_ERROR = LogItem_LogType_LT_ERROR;
  static const LogType LT_PROCESS = LogItem_LogType_LT_PROCESS;
  static inline bool LogType_IsValid(int value) {
    return LogItem_LogType_IsValid(value);
  }
  static const LogType LogType_MIN =
    LogItem_LogType_LogType_MIN;
  static const LogType LogType_MAX =
    LogItem_LogType_LogType_MAX;
  static const int LogType_ARRAYSIZE =
    LogItem_LogType_LogType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LogType_descriptor() {
    return LogItem_LogType_descriptor();
  }
  static inline const ::std::string& LogType_Name(LogType value) {
    return LogItem_LogType_Name(value);
  }
  static inline bool LogType_Parse(const ::std::string& name,
      LogType* value) {
    return LogItem_LogType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Protocol.MsgID id = 1 [default = MID_LOG];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::Protocol::MsgID id() const;
  inline void set_id(::Protocol::MsgID value);

  // required sint32 subId = 2;
  inline bool has_subid() const;
  inline void clear_subid();
  static const int kSubIdFieldNumber = 2;
  inline ::google::protobuf::int32 subid() const;
  inline void set_subid(::google::protobuf::int32 value);

  // required sint32 logId = 3;
  inline bool has_logid() const;
  inline void clear_logid();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::int32 logid() const;
  inline void set_logid(::google::protobuf::int32 value);

  // required string logValue = 4;
  inline bool has_logvalue() const;
  inline void clear_logvalue();
  static const int kLogValueFieldNumber = 4;
  inline const ::std::string& logvalue() const;
  inline void set_logvalue(const ::std::string& value);
  inline void set_logvalue(const char* value);
  inline void set_logvalue(const char* value, size_t size);
  inline ::std::string* mutable_logvalue();
  inline ::std::string* release_logvalue();
  inline void set_allocated_logvalue(::std::string* logvalue);

  // required .Protocol.LogItem.LogType eLogType = 5;
  inline bool has_elogtype() const;
  inline void clear_elogtype();
  static const int kELogTypeFieldNumber = 5;
  inline ::Protocol::LogItem_LogType elogtype() const;
  inline void set_elogtype(::Protocol::LogItem_LogType value);

  // @@protoc_insertion_point(class_scope:Protocol.LogItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_subid();
  inline void clear_has_subid();
  inline void set_has_logid();
  inline void clear_has_logid();
  inline void set_has_logvalue();
  inline void clear_has_logvalue();
  inline void set_has_elogtype();
  inline void clear_has_elogtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int id_;
  ::google::protobuf::int32 subid_;
  ::std::string* logvalue_;
  ::google::protobuf::int32 logid_;
  int elogtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_LogItem_2eproto();
  friend void protobuf_AssignDesc_LogItem_2eproto();
  friend void protobuf_ShutdownFile_LogItem_2eproto();

  void InitAsDefaultInstance();
  static LogItem* default_instance_;
};
// ===================================================================


// ===================================================================

// LogItem

// optional .Protocol.MsgID id = 1 [default = MID_LOG];
inline bool LogItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogItem::clear_id() {
  id_ = 19550;
  clear_has_id();
}
inline ::Protocol::MsgID LogItem::id() const {
  return static_cast< ::Protocol::MsgID >(id_);
}
inline void LogItem::set_id(::Protocol::MsgID value) {
  assert(::Protocol::MsgID_IsValid(value));
  set_has_id();
  id_ = value;
}

// required sint32 subId = 2;
inline bool LogItem::has_subid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogItem::set_has_subid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogItem::clear_has_subid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogItem::clear_subid() {
  subid_ = 0;
  clear_has_subid();
}
inline ::google::protobuf::int32 LogItem::subid() const {
  return subid_;
}
inline void LogItem::set_subid(::google::protobuf::int32 value) {
  set_has_subid();
  subid_ = value;
}

// required sint32 logId = 3;
inline bool LogItem::has_logid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogItem::set_has_logid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogItem::clear_has_logid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogItem::clear_logid() {
  logid_ = 0;
  clear_has_logid();
}
inline ::google::protobuf::int32 LogItem::logid() const {
  return logid_;
}
inline void LogItem::set_logid(::google::protobuf::int32 value) {
  set_has_logid();
  logid_ = value;
}

// required string logValue = 4;
inline bool LogItem::has_logvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogItem::set_has_logvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogItem::clear_has_logvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogItem::clear_logvalue() {
  if (logvalue_ != &::google::protobuf::internal::kEmptyString) {
    logvalue_->clear();
  }
  clear_has_logvalue();
}
inline const ::std::string& LogItem::logvalue() const {
  return *logvalue_;
}
inline void LogItem::set_logvalue(const ::std::string& value) {
  set_has_logvalue();
  if (logvalue_ == &::google::protobuf::internal::kEmptyString) {
    logvalue_ = new ::std::string;
  }
  logvalue_->assign(value);
}
inline void LogItem::set_logvalue(const char* value) {
  set_has_logvalue();
  if (logvalue_ == &::google::protobuf::internal::kEmptyString) {
    logvalue_ = new ::std::string;
  }
  logvalue_->assign(value);
}
inline void LogItem::set_logvalue(const char* value, size_t size) {
  set_has_logvalue();
  if (logvalue_ == &::google::protobuf::internal::kEmptyString) {
    logvalue_ = new ::std::string;
  }
  logvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LogItem::mutable_logvalue() {
  set_has_logvalue();
  if (logvalue_ == &::google::protobuf::internal::kEmptyString) {
    logvalue_ = new ::std::string;
  }
  return logvalue_;
}
inline ::std::string* LogItem::release_logvalue() {
  clear_has_logvalue();
  if (logvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logvalue_;
    logvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LogItem::set_allocated_logvalue(::std::string* logvalue) {
  if (logvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete logvalue_;
  }
  if (logvalue) {
    set_has_logvalue();
    logvalue_ = logvalue;
  } else {
    clear_has_logvalue();
    logvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Protocol.LogItem.LogType eLogType = 5;
inline bool LogItem::has_elogtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogItem::set_has_elogtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogItem::clear_has_elogtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogItem::clear_elogtype() {
  elogtype_ = 1;
  clear_has_elogtype();
}
inline ::Protocol::LogItem_LogType LogItem::elogtype() const {
  return static_cast< ::Protocol::LogItem_LogType >(elogtype_);
}
inline void LogItem::set_elogtype(::Protocol::LogItem_LogType value) {
  assert(::Protocol::LogItem_LogType_IsValid(value));
  set_has_elogtype();
  elogtype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LogItem_LogType>() {
  return ::Protocol::LogItem_LogType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogItem_2eproto__INCLUDED
