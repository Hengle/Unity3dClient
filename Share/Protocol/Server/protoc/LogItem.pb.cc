// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* LogItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogItem_LogType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogItem_2eproto() {
  protobuf_AddDesc_LogItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogItem.proto");
  GOOGLE_CHECK(file != NULL);
  LogItem_descriptor_ = file->message_type(0);
  static const int LogItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, logid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, logvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, elogtype_),
  };
  LogItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogItem_descriptor_,
      LogItem::default_instance_,
      LogItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogItem));
  LogItem_LogType_descriptor_ = LogItem_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogItem_descriptor_, &LogItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogItem_2eproto() {
  delete LogItem::default_instance_;
  delete LogItem_reflection_;
}

void protobuf_AddDesc_LogItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Protocol::protobuf_AddDesc_MsgHead_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rLogItem.proto\022\010Protocol\032\rMsgHead.proto"
    "\"\300\001\n\007LogItem\022\037\n\004head\030\001 \002(\0132\021.Protocol.Ms"
    "gHead\022\r\n\005logId\030\002 \002(\021\022\020\n\010logValue\030\003 \002(\t\022+"
    "\n\010eLogType\030\004 \002(\0162\031.Protocol.LogItem.LogT"
    "ype\"F\n\007LogType\022\r\n\tLT_NORMAL\020\001\022\016\n\nLT_WARN"
    "ING\020\002\022\014\n\010LT_ERROR\020\004\022\016\n\nLT_PROCESS\020\010", 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogItem.proto", &protobuf_RegisterTypes);
  LogItem::default_instance_ = new LogItem();
  LogItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogItem_2eproto {
  StaticDescriptorInitializer_LogItem_2eproto() {
    protobuf_AddDesc_LogItem_2eproto();
  }
} static_descriptor_initializer_LogItem_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LogItem_LogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogItem_LogType_descriptor_;
}
bool LogItem_LogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogItem_LogType LogItem::LT_NORMAL;
const LogItem_LogType LogItem::LT_WARNING;
const LogItem_LogType LogItem::LT_ERROR;
const LogItem_LogType LogItem::LT_PROCESS;
const LogItem_LogType LogItem::LogType_MIN;
const LogItem_LogType LogItem::LogType_MAX;
const int LogItem::LogType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogItem::kHeadFieldNumber;
const int LogItem::kLogIdFieldNumber;
const int LogItem::kLogValueFieldNumber;
const int LogItem::kELogTypeFieldNumber;
#endif  // !_MSC_VER

LogItem::LogItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogItem::InitAsDefaultInstance() {
  head_ = const_cast< ::Protocol::MsgHead*>(&::Protocol::MsgHead::default_instance());
}

LogItem::LogItem(const LogItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogItem::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  logid_ = 0;
  logvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elogtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogItem::~LogItem() {
  SharedDtor();
}

void LogItem::SharedDtor() {
  if (logvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete logvalue_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void LogItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogItem_descriptor_;
}

const LogItem& LogItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogItem_2eproto();
  return *default_instance_;
}

LogItem* LogItem::default_instance_ = NULL;

LogItem* LogItem::New() const {
  return new LogItem;
}

void LogItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::Protocol::MsgHead::Clear();
    }
    logid_ = 0;
    if (has_logvalue()) {
      if (logvalue_ != &::google::protobuf::internal::kEmptyString) {
        logvalue_->clear();
      }
    }
    elogtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protocol.MsgHead head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_logId;
        break;
      }

      // required sint32 logId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &logid_)));
          set_has_logid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logValue;
        break;
      }

      // required string logValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logvalue().data(), this->logvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eLogType;
        break;
      }

      // required .Protocol.LogItem.LogType eLogType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eLogType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::LogItem_LogType_IsValid(value)) {
            set_elogtype(static_cast< ::Protocol::LogItem_LogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Protocol.MsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // required sint32 logId = 2;
  if (has_logid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->logid(), output);
  }

  // required string logValue = 3;
  if (has_logvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logvalue().data(), this->logvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->logvalue(), output);
  }

  // required .Protocol.LogItem.LogType eLogType = 4;
  if (has_elogtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->elogtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Protocol.MsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // required sint32 logId = 2;
  if (has_logid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->logid(), target);
  }

  // required string logValue = 3;
  if (has_logvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logvalue().data(), this->logvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->logvalue(), target);
  }

  // required .Protocol.LogItem.LogType eLogType = 4;
  if (has_elogtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->elogtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protocol.MsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

    // required sint32 logId = 2;
    if (has_logid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->logid());
    }

    // required string logValue = 3;
    if (has_logvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logvalue());
    }

    // required .Protocol.LogItem.LogType eLogType = 4;
    if (has_elogtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->elogtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogItem::MergeFrom(const LogItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::Protocol::MsgHead::MergeFrom(from.head());
    }
    if (from.has_logid()) {
      set_logid(from.logid());
    }
    if (from.has_logvalue()) {
      set_logvalue(from.logvalue());
    }
    if (from.has_elogtype()) {
      set_elogtype(from.elogtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogItem::CopyFrom(const LogItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  return true;
}

void LogItem::Swap(LogItem* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(logid_, other->logid_);
    std::swap(logvalue_, other->logvalue_);
    std::swap(elogtype_, other->elogtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogItem_descriptor_;
  metadata.reflection = LogItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
